input User {
  email: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
  newPassword: String!
}

input SpecFile {
  tests: [String!]
  filePath: String!
}

input SessionInput {
  projectName: String!
  specFiles: [SpecFile!]!
}

input NextOptions {
  machineId: String
  previousPassed: Boolean
}

type SessionInfo {
  projectName: String!
  sessionId: String!
}

type Project {
  projectName: String!
  latestSession: String
  sessions: [Session!]
}

type Session {
  id: String!
  start: Int!
  end: Int!
  backlog: [Spec!]
}

type Spec {
  file: String!
  estimatedDuration: Int!
  start: Int!
  end: Int!
  passed: Boolean!
  assignedTo: String!
}

type Query {
  nextSpec(sessionId: String!, options: NextOptions): String!
  project(name: String!): Project!
  projects: [String!]!
  session(sessionId: String!): Session!
}

type Mutation {
  addSession(session: SessionInput!): SessionInfo!
  register(input: User!): String!
  login(input: User!): String!
  changePassword(input: ChangePasswordInput!): String!
  shareProject(email: String!, projectName: String!): String!
}

schema {
  query: Query
  mutation: Mutation
}
