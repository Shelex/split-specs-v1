input User {
  username: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
  newPassword: String!
}

input SpecFile {
  tests: [String!]
  filePath: String!
}

input SessionInput {
  projectName: String!
  specFiles: [SpecFile!]!
}

type SessionInfo {
  projectName: String!
  sessionId: String!
}

type Project {
  projectName: String!
  latestSession: String
  sessions: [Session!]
}

type Session {
  id: String!
  start: Int!
  end: Int!
  backlog: [Spec!]
}

type Spec {
  file: String!
  estimatedDuration: Int!
  start: Int!
  end: Int!
  assignedTo: String!
}

type Query {
  nextSpec(sessionId: String!, machineId: String): String!
  project(name: String!): Project!
  projects: [String!]!
}

type Mutation {
  addSession(session: SessionInput!): SessionInfo!
  register(input: User!): String!
  login(input: User!): String!
  changePassword(input: ChangePasswordInput!): String!
  shareProject(username: String!, projectName: String!): String!
}

schema {
  query: Query
  mutation: Mutation
}
