input User {
  email: String!
  password: String!
}

input ChangePasswordInput {
  password: String!
  newPassword: String!
}

input SpecFile {
  tests: [String!]
  filePath: String!
}

input SessionInput {
  projectName: String!
  specFiles: [SpecFile!]!
}

input NextOptions {
  machineId: String
  previousPassed: Boolean
}

type SessionInfo {
  projectName: String!
  sessionId: String!
}

type Project {
  projectName: String!
  sessions: [Session!]
  totalSessions: Int!
}

type Session {
  id: String!
  start: Int!
  end: Int!
  backlog: [Spec!]
}

input Pagination {
  limit: Int!
  offset: Int!
}

type Spec {
  file: String!
  estimatedDuration: Int!
  start: Int!
  end: Int!
  passed: Boolean!
  assignedTo: String!
}

type ApiKey {
  id: String!
  name: String!
  expireAt: Int!
}

type Query {
  nextSpec(sessionId: String!, options: NextOptions): String!
  project(name: String!, pagination: Pagination): Project!
  projects: [String!]!
  session(sessionId: String!): Session!
  getApiKeys: [ApiKey!]!
}

type Mutation {
  addSession(session: SessionInput!): SessionInfo!
  register(input: User!): String!
  login(input: User!): String!
  changePassword(input: ChangePasswordInput!): String!
  shareProject(email: String!, projectName: String!): String!
  deleteSession(sessionId: String!): String!
  deleteProject(projectName: String!): String!
  addApiKey(name: String!, expireAt: Int!): String!
  deleteApiKey(keyId: String!): String!
}

schema {
  query: Query
  mutation: Mutation
}
